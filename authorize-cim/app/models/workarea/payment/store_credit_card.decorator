# frozen_string_literal: true
module Workarea
  decorate Payment::StoreCreditCard, with: :cim do
    def perform!
      return true if @credit_card.token.present?
      return false unless @credit_card.profile.gateway_id.present?

      tmp_profile = customer_profile.params['profile']

      existing_profiles = if tmp_profile.present?
                            [tmp_profile['payment_profiles']].flatten.compact
                          else
                            []
                          end

      existing_match = existing_profiles.detect do |profile|
        profile['payment']['credit_card']['card_number'].end_with?(@credit_card.number.last(4))
      end

      if existing_match.present?
        @credit_card.token = existing_match['customer_payment_profile_id']
        update_on_gateway
      else
        create_on_gateway
      end

    rescue ActiveMerchant::ActiveMerchantError
      false
    end

    private

    def address_hash
      if address.blank?
        {}
      else
        { first_name:   address.first_name,
          last_name:    address.last_name,
          company:      address.company,
          address:      address.street,
          city:         address.city,
          state:        address.region,
          zip:          address.postal_code,
          country:      address.country,
          phone_number: address.phone_number }
      end
    end

    def customer_profile
      @customer_profile ||= if gateway_id.present?
                              gateway.get_customer_profile(customer_profile_id: gateway_id)
                            else
                              gateway.create_customer_profile(
                                profile: @credit_card.slice(:email)
                              )
                            end
    end

    def customer_payment_profile
      @customer_payment_profile ||=
        begin
          response = gateway.get_customer_payment_profile(
            customer_profile_id:         gateway_id,
            customer_payment_profile_id: @credit_card.token
          )

          raise AuthorizeCim::Error, response.params unless response.success?
          response
        end
    end

    def create_on_gateway
      response = gateway.create_customer_payment_profile(
        customer_profile_id: gateway_id,
        payment_profile: {
          payment: {
            credit_card: active_merchant_card
          },
          bill_to: address_hash
        }
      )

      raise ActiveMerchant::ResponseError, response unless response.success?
      @credit_card.token = response.params['customer_payment_profile_id']
    end

    def update_on_gateway
      profile = customer_payment_profile.params['payment_profile']

      card = ActiveMerchant::Billing::CreditCard.new(
        first_name:         @credit_card.first_name,
        last_name:          @credit_card.last_name,
        month:              @credit_card.month,
        year:               @credit_card.year,
        number:             profile['payment']['credit_card']['card_number'],
        verification_value: @credit_card.cvv
      )

      payment_profile = { customer_payment_profile_id: @credit_card.token,
                          payment: { credit_card: card },
                          bill_to: address_hash }

      response = gateway.update_customer_payment_profile(customer_profile_id: gateway_id,
                                                         payment_profile: payment_profile)

      raise ActiveMerchant::ResponseError, response unless response.success?
      true
    end

    def gateway_id
      @credit_card.profile.gateway_id
    end

    def active_merchant_card
      @credit_card.to_active_merchant
    end

    def address
      @credit_card.try(:address)
    end
  end
end
